/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length != inorder.length){
            throw new RuntimeException("");
        }
        int preLeft = 0;
        int inLeft = 0;
        int preRight = preorder.length-1;
        int inRight = inorder.length-1;
        Map<Integer,Integer> map = new HashMap<>();
        for(int i = 0;i < inorder.length; i++){
            map.put(inorder[i],i);
        }
        return buildTree(preorder,inorder,preLeft,preRight,map,inLeft,inRight);

    }
    public TreeNode buildTree(int[] preorder,int[] inorder,int preLeft,int preRight,
    Map<Integer,Integer>  map ,int inLeft,int inRight){
        if(preRight < preRight || inRight < inLeft){
            return null;
        }
        int rindex = map.get(preorder[preLeft]);
        TreeNode root = new TreeNode(preorder[preLeft]);
        root.left = buildTree(preorder,inorder,preLeft+1,rindex-inLeft+preLeft,map,inLeft,rindex-1);
        root.right = buildTree(preorder,inorder,rindex-inLeft+preLeft+1,preRight,map,rindex+1,inRight);
        return root;


    }
}